---
- set_fact:
    nso_rest_url: "{{ lookup('env', 'NSO_URL') }}"
    rollback_file: "{{ lookup('env', 'PWD') }}/rollback.yaml"
    is_initial_task_success: True

- block:
  # In case the calling test doesn't init OC data, and we dont PUT an OC config, then set reset_oc 
  # to true to ensure existence of OC path to avoid "patch to a nonexistent resource" error. 
  - name: Init OC
    include_role:
      name: nso-ned-device-configure
    vars:
      api_path: mdd:openconfig
      content: |
        mdd:openconfig: {}
      api_method: PUT
    when: reset_oc | default(False)

  # Perform only the first task, so NSO can create the initial rollback state we want.
  - name: Complete first task
    include_role:
      name: ned-to-oc-test
      tasks_from: iteratable_task
    loop: "{{ (api_test_data | flatten(levels = 1))[:1] if api_test_data is defined and (api_test_data | length > 0) else [] }}"
  
  # Fetch the rollback ID, of the initial state, prior to making further changes.
  - name: Save initial rollback state ID
    delegate_to: nso
    connection: local
    import_role:
      name: nso-rollback-save
    run_once: true
    when: will_save_rollback | default(True)

  rescue:
    - name: Initial task rescue
      set_fact:
        is_initial_task_success: False
    - name: Get last valid rollback ID
      include_vars: "{{ rollback_file }}"
      when: rollback_file is exists
    - name: Rollback NSO
      include_role:
        name: ciscops.mdd.nso
        tasks_from: rollback
      when: rollback_id is defined
    - name: Initial task failed. No further processing will occur...
      fail: 
        msg: Initial task was rescued. Exiting...

- block:
  # This will skip the first task as it was previously completed. Complete any remaining tasks.
  - name: Complete remaining tasks
    include_role:
      name: ned-to-oc-test
      tasks_from: iteratable_task
    loop: "{{ (api_test_data | flatten(levels = 1))[1:] if api_test_data is defined and (api_test_data | length > 0) else [] }}"

  - name: Execute NSO NED to OC script
    script: "{{ script_path }}"
    args:
      executable: python3
    register: nso_to_oc_result
    when: script_path is defined
  - debug:
      msg: "{{ nso_to_oc_result }}"
    when: script_path is defined

  - name: Fetch and print OC result
    uri:
      url: "{{ nso_api_url }}/restconf/data/tailf-ncs:devices/device={{ device }}/mdd:openconfig"
      url_username: "{{ nso_username }}"
      url_password: "{{ nso_password }}"
      force_basic_auth: yes
      validate_certs: no
      status_code: [200,201,204]
      method: GET
      headers: "{
        'Content-Type': 'application/yang-data+json',
        'Accept': 'application/yang-data+json'}"
      body_format: json
    delegate_to: localhost
    register: oc_result
    when: will_fetch_oc_result | default(True)

  - debug:
      msg: "{{ oc_result }}"
    when: will_fetch_oc_result | default(True)

  - assert:
      that: "{{ assertions | default([]) }}"

  # This rescue is here just in case the calling task set will_load_rollback = False and any task happen to fail.
  rescue:
    - name: Perform rescue rollback
      include_vars: "{{ rollback_file }}"
    - name: Rollback NSO
      include_role:
        name: ciscops.mdd.nso
        tasks_from: rollback
      when: not (will_load_rollback | default(False))
    - name: Test failed and rescue occurred. 
      fail: 
        msg: A test task was rescued. Exiting...

  always:
    - name: Perform default rollback
      include_vars: "{{ rollback_file }}"
    - name: Rollback NSO
      include_role:
        name: ciscops.mdd.nso
        tasks_from: rollback
      when: will_load_rollback | default(True)
  when: is_initial_task_success
